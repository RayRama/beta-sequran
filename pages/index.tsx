/** @jsxImportSource @emotion/react */
import { SearchOptions } from "@/components/atoms/SearchOptions";
import { Content } from "@/components/molecules/Content";
// import { Searchbar } from "@/components/molecules/Searchbar";
import { css } from "@emotion/react";
import { Loader, Skeleton } from "@mantine/core";
import { useDebouncedValue } from "@mantine/hooks";
import { useQuery } from "@tanstack/react-query";
import { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import React from "react";

const Group = dynamic(() => import("@mantine/core").then((mod) => mod.Group), {
  ssr: false,
  loading: () => <Loader variant="dots" />,
});

const SegmentedControl = dynamic(
  () => import("@mantine/core").then((mod) => mod.SegmentedControl),
  { ssr: false, loading: () => <Loader variant="dots" /> }
);

const Searchbar = dynamic(
  () => import("@/components/molecules/Searchbar").then((mod) => mod.Searchbar),
  { ssr: false, loading: () => <Loader variant="dots" /> }
);

type SearchData = {
  verse_key: string;
  document: string;
  similarity_score: number;
};

const Index: NextPage = () => {
  const [search, setSearch] = React.useState<string>("");
  const [enabled, setEnabled] = React.useState<boolean>(false);

  async function searchData(searchTerm: string): Promise<SearchData> {
    const res = await fetch(
      `http://135.181.26.148:25117/search?query=${searchTerm}`,
      {
        cache: "force-cache",
      }
    );
    const data = await res.json();
    setEnabled(false);
    return data.results;
  }

  // const debouncedSearchTerm = useDebounce(search, 1000);

  const { data, isError, error, isFetching } = useQuery<
    SearchData, // Menggunakan tipe SearchData sebagai tipe generic
    Error
  >({
    queryKey: ["search", useDebouncedValue(search, 200)] as const, // Menyesuaikan tipe argumen queryKey
    queryFn: () => searchData(search),
    enabled: enabled,
    cacheTime: 1000 * 60 * 60 * 24,
  });

  return (
    <div
      css={css`
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        padding: 15px;
      `}
    >
      <Head>
        <title>Sequran - Mesin Pencari Quran</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>

      <Searchbar
        css={css`
          width: 40%;
          @media (max-width: 768px) {
            width: 90%;
          }
        `}
        defaultValue={search}
        onChange={(e) => setSearch(e.currentTarget.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            setEnabled(true);
          }
        }}
        setter={setEnabled}
      />

      <Group
        position="center"
        style={{
          marginTop: "10px",
          marginBottom: "10px",
        }}
      >
        <SegmentedControl fullWidth data={SearchOptions} />
      </Group>

      {isFetching && (
        <Skeleton height={100} width="100%" visible style={{ margin: 10 }} />
      )}
      {isError && <div>Error: {error?.message}</div>}

      {/* Tampilkan data yang diterima dari server */}
      {data && Array.isArray(data) && (
        <div>
          {/* Misalnya, tampilkan properti 'name' dari data */}
          {data?.map((item: any) => (
            <div key={item.verse_key}>
              <p>{item.verse_key}</p>
              <p
                css={css`
                  text-align: justify;
                `}
              >
                {item.document}
              </p>
            </div>
          ))}
        </div>
      )}

      <Content />
    </div>
  );
};

export default Index;
